package com.ef.dao.logs;

import com.ef.model.exceptions.ExceptionConstants;
import com.ef.model.exceptions.LogEventIDException;
import org.springframework.jdbc.core.JdbcTemplate;

import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;

public abstract class AbstractRepository {
    protected JdbcTemplate jdbcTemplate;

    public abstract void setDataSource(DataSource dataSource);

    /**
     * Method used to create the multi insert query for the efficient bulk insert.
     *
     * @param logQuery
     * @param insertSize
     * @param remainderSize
     * @param questions
     * @return
     */
    public Map<String, Integer> createMultiInsertQuery(LogQuery logQuery, int insertSize,
        int remainderSize, int questions) {
        Map<String, Integer> sqlMap = new HashMap<>();
        sqlMap.put(
            String.format(logQuery.toString(), createDynamicValueBuilder(insertSize, questions)),
            insertSize);

        if (remainderSize != 0) {
            sqlMap.put(String
                    .format(logQuery.toString(), createDynamicValueBuilder(remainderSize, questions)),
                remainderSize);
        }

        return sqlMap;
    }

    /**
     * We need to determine how many values we will insert using the prepared statment. In this
     * very limited case we only use 6 and 3 ?'s. So, there is no need to dynamically add the questions.
     * If this was a larger project this can be converted to be more dynamic.
     *
     * @param insertSize
     * @param questions
     * @return
     */
    private StringBuilder createDynamicValueBuilder(int insertSize, int questions) {
        StringBuilder builder = new StringBuilder();

        for (int i = 0; i < insertSize; ++i) {
            builder.append(questions == 6 ? "(?,?,?,?,?,?)" : "(?,?,?)");

            if (i != insertSize - 1)
                builder.append(",");
        }

        return builder;
    }

    /**
     * Method used to grab the auto generated ID that was created from the Prepared Statement
     * insert.
     *
     * @param preparedStatement
     * @return
     * @throws LogEventIDException
     */
    public Integer grabAutoGeneratedID(PreparedStatement preparedStatement)
        throws LogEventIDException {
        Integer id;
        try (ResultSet rs = preparedStatement.getGeneratedKeys()) {
            rs.next();
            id = rs.getInt(1);
        } catch (Exception e) {
            throw new LogEventIDException(
                ExceptionConstants.LOG_EVENT_ID_EXCEPTION_AUTO_GEN.toString());
        }
        return id;
    }
}
