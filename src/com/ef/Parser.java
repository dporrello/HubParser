package com.ef;

import com.ef.dao.logs.LogRecordRepository;
import com.ef.model.logs.LogParserResponse;
import com.ef.model.settings.ClientApplicationContext;
import com.ef.utilities.ArgumentParser;
import com.ef.utilities.LogParser;
import org.apache.log4j.Logger;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.List;

public class Parser {
    private static final Logger LOGGER = Logger.getLogger(Parser.class);

    public static void main(String[] args) {
        // First we want to load the Beans that I have set up in the applicationContext primarily
        // for the DAO layer. Simple application, so we only have one DAO Bean and a DataSource bean.
        ClassPathXmlApplicationContext context =
            new ClassPathXmlApplicationContext("/applicationContext.xml");

        System.out.println("Validating and Parsing arguments...");

        // First validate the parameters on startup.
        if (!ArgumentParser.validateArguments(args)) {
            System.out.println(
                "The arguments passed in are invalid. Please try with correct parameters.");
            LOGGER.error("The arguments passed in are invalid.");
            return;
        }

        // If valid, then parse these arguments and store in our ClientApplicationContext object.
        ClientApplicationContext clientApplicationContext;
        try {
            clientApplicationContext = ArgumentParser.parseArguments(args);
        } catch (Exception exception) {
            System.out.println(exception.getMessage());
            LOGGER.error(exception);
            return;
        }

        System.out.println("Reading log file...");

        // Once we have parsed the arguments we need to try to Parse the Log File and create a List
        // of LogRecords to be stored in the DB and analyzed.
        LogParserResponse response;
        try {
            response = LogParser.parseLogFile(clientApplicationContext.getAccessLogPath());
        } catch (Exception exception) {
            System.out.println(exception.getMessage());
            LOGGER.error(exception);
            return;
        }

        // From this response generated by the LogParser we need to get the IP Addresses that have
        // exceeded the threshold based on the arguments on startup.
        List<String> ipAddressList = response
            .getIpAddressesPastThreshold(clientApplicationContext.getStartDate(),
                clientApplicationContext.getEndDate(), clientApplicationContext.getThreshold());

        System.out.println(
            "The following IP addresses have surpassed the request limits bound by the arguments provided:");
        System.out.println(ipAddressList);

        // At this point we need to start storing these values into the database.
        System.out.println("Writing to database...");
        LogRecordRepository logRecordRepository =
            (LogRecordRepository) context.getBean("logRecordRepository");
        try {
            Integer id = logRecordRepository.insertLogEvent(clientApplicationContext.getAccessLogPath());
            logRecordRepository.insertAllRecords(response.getLogRecordList(), id);
            logRecordRepository.insertBlockedRecords(ipAddressList, clientApplicationContext, id);
        } catch (Exception exception) {
            System.out.println(exception.getMessage());
            LOGGER.error(exception.getMessage());
            LOGGER.error(exception);
            return;
        }
        System.out.println("Successfully saved to database.");
    }
}
